name: Java CI with Maven

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clonaci贸n de c贸digo
        uses: actions/checkout@v4

      # 1. Version in pom.xml
      - name: Set up JDK 8
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "8"
          distribution: "temurin"

      # 2. Compile
      #- name: Build with Maven
      # run: mvn package

      # 3. Run tests
      #- name: Running Unit Test
      # run: mvn clean test

      # 3.1 Generate Jacoco report
      #- name: Generate Jacoco report
      # run: mvn jacoco:report

      # 3.2 Jacoco fail bellow threshold
      #- name: JaCoCo Code Coverage Report
      # id: jacoco_reporter
      # uses: PavanMudigonda/jacoco-reporter@v5.0
      # with:
      #   coverage_results_path: target/site/jacoco/jacoco.xml
      #   coverage_report_name: Coverage
      #   coverage_report_title: JaCoCo
      #   github_token: ${{ secrets.GITHUB_TOKEN }}
      #   skip_check_run: false
      #   minimum_coverage: 72
      #   fail_below_threshold: true
      #   publish_only_summary: false

      # 3.3. Upload Jacoco report as artifact
      #- name: Upload Jacoco report
      # uses: actions/upload-artifact@v4
      # with:
      #   name: jacoco-report
      #   path: target/site/jacoco/index.html

      # 4. Sonar (previous compile to avoid conflicts)
      #- name: Set up JDK 17
      #  uses: actions/setup-java@v4.2.1
      #  with:
      #    java-version: "17"
      #    distribution: "temurin"
      #- run: mvn package

      # 4.1 Sonar Analisis
      # https://docs.sonarsource.com/sonarcloud/advanced-setup/ci-based-analysis/sonarscanner-for-maven
      #- name: Analisis SonarCloud
      # run: |
      #   mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:3.11.0.3922:sonar \
      #   -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
      #   -Dsonar.host.url=https://sonarcloud.io \
      #   -Dsonar.organization=alexbgh1 \
      #   -Dsonar.projectKey=alexbgh1_microservicio-java

      # 4.2 Sonar Quality Gate
      #- name: SonarQube Quality Gate Check
      #env:
      #  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      #with:
      #  scanMetadataReportFile: target/sonar/report-task.txt

      # 5. Docker Build & Push to dockerhub
      #- name: Docker Login
      #uses: docker/login-action@v3.1.0
      #with:
      #username: ${{ secrets.DOCKER_USER }}
      #password: ${{ secrets.DOCKER_PASS }}

      #- name: Set up Docker Buildx
      #uses: docker/setup-buildx-action@v3

      #- name: Docker Build
      #run: |
      #  docker build . -t ${{ secrets.DOCKER_USER }}/microservicio-java:latest

      #- name: Docker Push
      #run: |
      #  docker push ${{ secrets.DOCKER_USER }}/microservicio-java:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Clonaci贸n de c贸digo
        uses: actions/checkout@v4

      - name: Despliegue Kubernetes
        run: |
          kubectl apply -f deploy.yaml

      # https://stackoverflow.com/questions/57819539/github-actions-how-to-share-a-calculated-value-between-job-steps
      - name: Port from Kubernetes Service
        run: |
          $PORT = kubectl get svc service-microservicio-java -o=jsonpath='{.spec.ports[0].nodePort}'
          $PORT > port.txt
          C:\apache-jmeter-5.6.3\bin\jmeter.bat -n -t greeting.jmx -Jport="$PORT" -l result.jtl

      # if ($errorPercentage greater than 50) then exit 1 (50 is the threshold)
      - name: Check Error Percentage
        run: |
          $jmeterLog = Get-Content jmeter.log
          $summary = $jmeterLog | Select-String 'summary.*'
          $errorPercentage = $summary -split 'Err:' | Select-String '\(\d+\.\d+%\)' -AllMatches | Foreach-Object { $_.Matches.Value }

          $errorPercentage = $errorPercentage -replace '[\(\)%]', '' 

          if ($errorPercentage -gt 50) {
            exit 0
          }

      - uses: matt-ball/newman-action@master
        name: Run Postman tests
        env:
          PORT: $(cat port.txt)
        with:
          apiKey: ${{ secrets.POSTMAN_API_KEY }}
          collection: ${{ secrets.POSTMAN_COLLECTION }}
          environment: ${{ secrets.POSTMAN_ENV }}
          delayRequest: 1000
          envVar: '[{ "key": "PORT", "value": "{{PORT}}"}]'
        # TODO: Test using JMeter & acceptance criteria Postman
